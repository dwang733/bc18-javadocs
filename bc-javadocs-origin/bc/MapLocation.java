/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package bc;

public class MapLocation {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected MapLocation(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(MapLocation obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

//  protected void finalize() {
//    delete();
//  }
//
//  public synchronized void delete() {
//    if (swigCPtr != 0) {
//      if (swigCMemOwn) {
//        swigCMemOwn = false;
//        bcJNI.delete_MapLocation(swigCPtr);
//      }
//      swigCPtr = 0;
//    }
//  }

  /**
   * Returns a new MapLocation representing the location with the given coordinates on a planet.
   */
  public MapLocation(Planet planet, int x, int y) {
    this(bcJNI.new_MapLocation(planet.swigValue(), x, y), true);
  }

  /**
   * Returns the location one square from this one in the given direction.
   */
  public MapLocation add(Direction direction) {
    long cPtr = bcJNI.MapLocation_add(swigCPtr, this, direction.swigValue());
    return (cPtr == 0) ? null : new MapLocation(cPtr, true);
  }

  /**
   * Returns the location one square from this one in the opposite direction.
   */
  public MapLocation subtract(Direction direction) {
    long cPtr = bcJNI.MapLocation_subtract(swigCPtr, this, direction.swigValue());
    return (cPtr == 0) ? null : new MapLocation(cPtr, true);
  }

  /**
   * Returns the location multiple squares from this one in the given direction.
   */
  public MapLocation addMultiple(Direction direction, int multiple) {
    long cPtr = bcJNI.MapLocation_addMultiple(swigCPtr, this, direction.swigValue(), multiple);
    return (cPtr == 0) ? null : new MapLocation(cPtr, true);
  }

  /**
   * Returns the location translated from this location by dx in the x direction and dy in the y direction.
   */
  public MapLocation translate(int dx, int dy) {
    long cPtr = bcJNI.MapLocation_translate(swigCPtr, this, dx, dy);
    return (cPtr == 0) ? null : new MapLocation(cPtr, true);
  }

  /**
   * Computes the square of the distance from this location to the specified location.
   * If on different planets, returns the maximum integer.
   */
  public long distanceSquaredTo(MapLocation o) {
    return bcJNI.MapLocation_distanceSquaredTo(swigCPtr, this, MapLocation.getCPtr(o), o);
  }

  /**
   * Returns the Direction from this location to the specified location. If the locations are equal this method returns Center.
   *
   * <dl>
   *     <dt><span class="strong">Throws:</span></dt>
   *     <dd>DifferentPlanet - The locations are on different planets.</dd>
   * </dl>
   */
  public Direction directionTo(MapLocation o) {
    return Direction.swigToEnum(bcJNI.MapLocation_directionTo(swigCPtr, this, MapLocation.getCPtr(o), o));
  }

  /**
   * Determines whether this location is adjacent to the specified location, including diagonally.
   * Note that squares are not adjacent to themselves, and squares on different planets are not adjacent to each other.
   */
  public boolean isAdjacentTo(MapLocation o) {
    return bcJNI.MapLocation_isAdjacentTo(swigCPtr, this, MapLocation.getCPtr(o), o);
  }

  /**
   * Whether this location is within the distance squared range of the specified location, inclusive.
   * False for locations on different planets.
   */
  public boolean isWithinRange(long range, MapLocation o) {
    return bcJNI.MapLocation_isWithinRange(swigCPtr, this, range, MapLocation.getCPtr(o), o);
  }

  public String toString() {
    return bcJNI.MapLocation_toString(swigCPtr, this);
  }

  /**
   * Deep-copy a MapLocation
   */
  public MapLocation clone() {
    long cPtr = bcJNI.MapLocation_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new MapLocation(cPtr, true);
  }

  /**
   *
   * @param other
   * @return
   */
  public boolean equals(MapLocation other) {
    return bcJNI.MapLocation_equals(swigCPtr, this, MapLocation.getCPtr(other), other);
  }

  /**
   * Serialize a MapLocation to a JSON string.
   */
  public String toJson() {
    return bcJNI.MapLocation_toJson(swigCPtr, this);
  }

  /**
   * Sets the planet of the map location
   */
  public void setPlanet(Planet value) {
    bcJNI.MapLocation_planet_set(swigCPtr, this, value.swigValue());
  }

  /**
   * Returns the planet of the map location.
   */
  public Planet getPlanet() {
    return Planet.swigToEnum(bcJNI.MapLocation_planet_get(swigCPtr, this));
  }

  /**
   * Sets the x-coordinate of the map location
   */
  public void setX(int value) {
    bcJNI.MapLocation_x_set(swigCPtr, this, value);
  }

  /**
   * Returns the x-coordinate of the map location
   */
  public int getX() {
    return bcJNI.MapLocation_x_get(swigCPtr, this);
  }

  /**
   * Sets the y-coordinate of the map location.
   */
  public void setY(int value) {
    bcJNI.MapLocation_y_set(swigCPtr, this, value);
  }

  /**
   * Returns the y-coordinate of the map location
   */
  public int getY() {
    return bcJNI.MapLocation_y_get(swigCPtr, this);
  }

}
