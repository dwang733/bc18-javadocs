/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package bc;

public class Location {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected Location(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(Location obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

//  protected void finalize() {
//    delete();
//  }
//
//  public synchronized void delete() {
//    if (swigCPtr != 0) {
//      if (swigCMemOwn) {
//        swigCMemOwn = false;
//        bcJNI.delete_Location(swigCPtr);
//      }
//      swigCPtr = 0;
//    }
//  }

  public Location() {
    this(bcJNI.new_Location(), true);
  }

  /**
   * Whether the unit is on a map.
   */
  public boolean isOnMap() {
    return bcJNI.Location_isOnMap(swigCPtr, this);
  }

  /**
   * Whether the location is on the map and on this planet.
   */
  public boolean isOnPlanet(Planet planet) {
    return bcJNI.Location_isOnPlanet(swigCPtr, this, planet.swigValue());
  }

  /**
   * The map location of the unit.
   *
   * <dl>
   *     <dt><span class="strong">Throws:</span></dt>
   *     <dd>UnitNotOnMap - If the unit is in a garrison or in space, and does not have a map location.</dd>
   * </dl>
   */
  public MapLocation mapLocation() {
    long cPtr = bcJNI.Location_mapLocation(swigCPtr, this);
    return (cPtr == 0) ? null : new MapLocation(cPtr, true);
  }

  /**
   * Whether the unit is in a garrison.
   */
  public boolean isInGarrison() {
    return bcJNI.Location_isInGarrison(swigCPtr, this);
  }

  /**
   * The structure whose garrison the unit is in.
   *
   * <dl>
   *     <dt><span class="strong">Throws:</span></dt>
   *     <dd>UnitNotInGarrison - If the unit is not in a garrison.</dd>
   * </dl>
   */
  public int structure() {
    return bcJNI.Location_structure(swigCPtr, this);
  }

  /**
   * Whether the unit is in space.
   */
  public boolean isInSpace() {
    return bcJNI.Location_isInSpace(swigCPtr, this);
  }

  /**
   * Determines whether this location is adjacent to the specified location, including diagonally.
   * Note that squares are not adjacent to themselves, and squares on different planets are not adjacent to each other.
   * Also, nothing is adjacent to something not on a map.
   */
  public boolean isAdjacentTo(Location o) {
    return bcJNI.Location_isAdjacentTo(swigCPtr, this, Location.getCPtr(o), o);
  }

  /**
   * Whether this location is within the distance squared range of the specified location, inclusive.
   * False for locations on different planets. Note that nothing is within the range of something not on the map.
   */
  public boolean isWithinRange(long range, Location o) {
    return bcJNI.Location_isWithinRange(swigCPtr, this, range, Location.getCPtr(o), o);
  }

  public String toString() {
    return bcJNI.Location_toString(swigCPtr, this);
  }

  /**
   * Deep-copy a Location.
   */
  public Location clone() {
    long cPtr = bcJNI.Location_clone(swigCPtr, this);
    return (cPtr == 0) ? null : new Location(cPtr, true);
  }

  public boolean equals(Location other) {
    return bcJNI.Location_equals(swigCPtr, this, Location.getCPtr(other), other);
  }

  /**
   * Serialize a Location to a JSON string.
   */
  public String toJson() {
    return bcJNI.Location_toJson(swigCPtr, this);
  }

}
